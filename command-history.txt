////////////// how to use git in a basic manner ////////////
git add .
git commit -m "some comment"
git push -u oriign main
////////////////////////////////////////////////////////////

//// Creating a Core app to be used in other app /////////
Sometimes, it is necessary to duplicate some portions of code 
in different apps. To alleviate this issue and preserve the consistency
of the project, it is of good practice to create a core app and put 
common codes there. For example, "created" and "updated" are two model members
that can be used in many models. 
Also, we have initialized the room application in this commit.
//////////////////////////////////////////////////////////

/// Completing Room model ////////////////////////////////
First, we have to install a django library for countries, as
pipenv shell
pipenv install django-countries
Then, add django_countries to installed apps. 
Now, one just needs to import it and use it, as
from django_countries.fields import CountryField
Next, add all the required fields to the Room model.
/////////////////////////////////////////////////////////

///// How to use manytomany relationships ////////////////
In this commit, I want to use manytomany relationships to 
create room types, amenities, and son on. To do so, I need to 
define an abstract class for items with two fields called name, and 
maybe subtitle. Then, using this abstract class, I define other classes
for my purposes. 
//////////////////////////////////////////////////////////

/////// Adding other items to a room /////////////////////
such as amenities, ...
//////////////////////////////////////////////////////////

////// Working with Meta class ////////////////////////////
Meta class of a Model have many options that we can use to
 configure the behavior of the class. For example, verbose_name and 
 verbose_name_plural can be used to define the name of the class in 
 plural situations. 
///////////////////////////////////////////////////////////

///// Adding Photo Class to the Room model///////////////////
Rooms can have many photos. So, we create a Photo class and 
assign each photo to a room by a foreignkey concept. 
////////////////////////////////////////////////////////////

///// Completing the Review Class Model/////////////////////
////////////////////////////////////////////////////////////

////// Completing Reservation Model ////////////////////////
////////////////////////////////////////////////////////////

////// Completing List Model //////////////////////////////
///////////////////////////////////////////////////////////