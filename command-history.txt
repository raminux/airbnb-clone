////////////// how to use git in a basic manner ////////////
git add .
git commit -m "some comment"
git push -u oriign main
////////////////////////////////////////////////////////////

//// Creating a Core app to be used in other app /////////
Sometimes, it is necessary to duplicate some portions of code 
in different apps. To alleviate this issue and preserve the consistency
of the project, it is of good practice to create a core app and put 
common codes there. For example, "created" and "updated" are two model members
that can be used in many models. 
Also, we have initialized the room application in this commit.
//////////////////////////////////////////////////////////

/// Completing Room model ////////////////////////////////
First, we have to install a django library for countries, as
pipenv shell
pipenv install django-countries
Then, add django_countries to installed apps. 
Now, one just needs to import it and use it, as
from django_countries.fields import CountryField
Next, add all the required fields to the Room model.
/////////////////////////////////////////////////////////

///// How to use manytomany relationships ////////////////
In this commit, I want to use manytomany relationships to 
create room types, amenities, and son on. To do so, I need to 
define an abstract class for items with two fields called name, and 
maybe subtitle. Then, using this abstract class, I define other classes
for my purposes. 
//////////////////////////////////////////////////////////

/////// Adding other items to a room /////////////////////
such as amenities, ...
//////////////////////////////////////////////////////////

////// Working with Meta class ////////////////////////////
Meta class of a Model have many options that we can use to
 configure the behavior of the class. For example, verbose_name and 
 verbose_name_plural can be used to define the name of the class in 
 plural situations. 
///////////////////////////////////////////////////////////

///// Adding Photo Class to the Room model///////////////////
Rooms can have many photos. So, we create a Photo class and 
assign each photo to a room by a foreignkey concept. 
////////////////////////////////////////////////////////////

///// Completing the Review Class Model/////////////////////
////////////////////////////////////////////////////////////

////// Completing Reservation Model ////////////////////////
////////////////////////////////////////////////////////////

////// Completing List Model //////////////////////////////
///////////////////////////////////////////////////////////

///// Adding Conversation and Message Model/////////////////
During a conversation, multiple users can participate and send 
messages to each other. To model this procedure as a database entity, 
we define a conversation class with participants as manytomany field. 
Then, we define a Message class that connects to the Conversation class. 
////////////////////////////////////////////////////////////

//// Improving the Admin panel for Room model//////////////
///////////////////////////////////////////////////////////

/////// Customizing Room admin panel ///////////////////////
ordering with specific columns 
////////////////////////////////////////////////////////////

/////// Defining custom function in Admin Model for Room/////
It is sometimes necessary to define some custom functions to 
show some stattistics in the admin panel. For example, Django does 
not support manytomany fields to be displayed via list_display variable. 
To do so, it is required to define a custom function and handle it manually. 
/////////////////////////////////////////////////////////////

///// How to work with model Managers and Querysets /////////
It is of utmost important to know how to work with django models using 
Managers and Querysets. To do so, we can enable django-shell and investigate 
the different models using commandline. To activate django-shell, type the following 
command in your pipenv-enabled shell:
$python manage.py shell
--> Managers help to retrieve rows from the database without writing 
any sql queries.
>>>from users.models import User
>>>User.objects
<django.contrib.auth.models.UserManager object at 0x7fd4dc944fd0>
>>>User.objects.all()
<QuerySet [<User: airbnb>, <User: ramin>]>
As you can see, user manager returns a Queryset. 
There are two python functions namely, vars and dir that are helpful for 
investigating classes. Look at the examples below:
>>>all_users=User.objects.all()
>>>dir(all_users)  --> returns all methods and properties of an object
..., 'count', 'create', 'dates', ....
>>>vars(all_users) --> returns changeable attributes of an object
Now, let's discover something interesting. 
>>>airbnb=User.objects.get(username="airbnb")
>>>dir(airbnb)
... , 'reservation_set', 'review_set', 'room_set', 'save', 'save_base', ...
You see something interesting, "*_set". this object shows that there is a 
foreignkey from Room table to the User table. It is awesome. 
>>>airbnb.room_set.all()
<QuerySet [<Room: Ramin's Mansion>]>
>>>
Another way to access rooms of a user is to define a related_name field when 
defining a forienkey such as:
host = models.ForiegnKey("users.User", related_name="rooms", on_delete="models.CASCADE")
now, we can access the rooms of a user from the user object by calling as:
user.rooms.all() == user.room_set.all()

Change the related_name of all foriegnkey and manytomany fields. 

Using the related_name option make life easier. 
/////////////////////////////////////////////////////////////

////////// Improving All Admins //////////////////////////////
In this section, we learn how to define methods inside Models. 
Sometimes we need to have some statistics to show to users. In this case, 
it is better to define methods inside the model to do the task for us. 
//////////////////////////////////////////////////////////////

/////improving List, Message, and Conversation Admin/////////////////////////////////////
We can define methods inside Models and then use them inside Admins and
 wherever they suit.
/////////////////////////////////////////////////////////////
